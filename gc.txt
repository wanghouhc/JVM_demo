1.引用计数法
缺点：相互引用无法回收

2.标记-清除（优化1的缺点）----GCroot的方式
缺点：
  空间碎片
  标记时要暂停进程

3.标记-压缩（优化2的缺点）
将存活的对象压缩到内存的另一端
缺点：移动存活对象时，存在性能消耗

4.复制算法 年輕代的垃圾回收算法使用的是複制算法，因為年輕代中的對象基本都是朝生夕死的(80%以上)
每次使用一半的内存
优点：内存空间完整，无碎片化
缺点：当存活对象比较多，垃圾比较少时，性能消耗比较大，  只能使用其中一半的内存


5.分代算法
根据垃圾回收的特点进行算法选择

-------------------------
垃圾收集器以及内存分配

1.串行垃圾收集器 --一般不在新生代使用，如果发现使用就可以进行优化  使用在老年代
单线程进行垃圾回收，java中的所有线程都要进化暂停 -- STW
Allocation Failure：垃圾回收的原因，堆分配内存失败
DefNew:当前的垃圾回收器为串行收集器
 4416K->512K(4928K)：年轻代GC前后  4928 代表总大小
 0.0082419：GC时间
 11258K->9255K(15872K)：堆得大小 以及GC前后变化
 Full GC (Allocation Failure)：内存空间进行全部回收（不仅仅是年轻代，还包括老年代）
[GC (Allocation Failure) [DefNew: 4928K->511K(4928K), 0.0082419 secs] 11258K->9255K(15872K), 0.0082751 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [DefNew: 4927K->4927K(4928K), 0.0000171 secs][Tenured: 8743K->10943K(10944K), 0.0305949 secs] 13671K->11753K(15872K), [Metaspace: 3247K->3247K(1056768K)], 0.0538294 secs] [Times: user=0.01 sys=0.00, real=0.05 secs]
[Full GC (Allocation Failure) [Tenured: 10943K->3446K(10944K), 0.0103896 secs] 15871K->3446K(15872K), [Metaspace: 3247K->3247K(1056768K)], 0.0104220 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
[GC (Allocation Failure) [DefNew: 4416K->512K(4928K), 0.0052654 secs] 7862K->5212K(15872K), 0.0052992 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]

2.并行垃圾回收器 parNew（在串行上进行了改进） 使用在新生代
STW 暂停时间更短
[GC (Allocation Failure) [ParNew: 4926K->4926K(4928K), 0.0000126 secs][Tenured: 10330K->9029K(10944K), 0.0272887 secs] 15256K->9029K(15872K), [Metaspace: 3252K->3252K(1056768K)], 0.0274098 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]
[GC (Allocation Failure) [ParNew: 4416K->4416K(4928K), 0.0000200 secs][Tenured: 9029K->10943K(10944K), 0.0436790 secs] 13445K->11999K(15872K), [Metaspace: 3252K->3252K(1056768K)], 0.0437523 secs] [Times: user=0.05 sys=0.00, real=0.04 secs]
[Full GC (Allocation Failure) [Tenured: 10943K->10943K(10944K), 0.0419343 secs] 15871K->14695K(15872K), [Metaspace: 3252K->3252K(1056768K)], 0.0419742 secs] [Times: user=0.05 sys=0.00, real=0.04 secs]
[Full GC (Allocation Failure) [Tenured: 10943K->10943K(10944K), 0.0397294 secs] 15871K->15487K(15872K), [Metaspace: 3252K->3252K(1056768K)], 0.0397706 secs] [Times: user=0.05 sys=0.00, real=0.04 secs]

3.ParallelGC 可以工作中新生代和老年代 并行垃圾回收器 会触发STW
可以设置停顿时间

 -XX:+UseParallelGC
 -XX:+UseParallelOldGC
 -XX:MaxGCPauseMillis=100  设置停顿时间
 -XX:+PrintGCDetails

 [GC (Allocation Failure) [PSYoungGen: 4096K->504K(4608K)] 4096K->1944K(15872K), 0.0576884 secs] [Times: user=0.00 sys=0.00, real=0.06 secs]
 [GC (Allocation Failure) [PSYoungGen: 4600K->502K(4608K)] 6040K->4191K(15872K), 0.0072565 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
 [GC (Allocation Failure) [PSYoungGen: 4598K->498K(4608K)] 8287K->6450K(15872K), 0.0042234 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
 [GC (Allocation Failure) [PSYoungGen: 4594K->491K(4608K)] 10546K->8691K(15872K), 0.0045212 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
 [GC (Allocation Failure) [PSYoungGen: 4587K->507K(4608K)] 12787K->10483K(15872K), 0.0027862 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
 [Full GC (Ergonomics) [PSYoungGen: 507K->0K(4608K)] [ParOldGen: 9976K->2606K(11264K)] 10483K->2606K(15872K), [Metaspace: 3247K->3247K(1056768K)], 0.0120279 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]

4.CMS垃圾收集器 并发，标记-清除 解决暂停STW问题
垃圾回收时，程序可以继续运行
1.初始化标记 标记root 会导致stw
2.并发标记 与用户线程一起运行
3.预处理 和用户线程同时运行
4.重新标记 会导致STW
5.并发清除 与用户线程同时运行
6.调整堆的大小 设置CMS在清理之后进行内存压缩，目的是清理内存中的碎片
7.并发重置状态下等待下次CMS的触发

-XX:+UseConcMarkSweepGC -XX:+PrintGCDetails -Xms16m -Xmx16m

 初始化标记 标记root 会导致stw
[GC (CMS Initial Mark) [1 CMS-initial-mark: 5666K(10944K)] 6266K(15872K), 0.0003284 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
并发标记 与用户线程一起运行
[CMS-concurrent-mark-start]
 预处理 和用户线程同时运行
[CMS-concurrent-preclean-start]
重新标记 会导致STW
[CMS-concurrent-reset-start]
并发清除 与用户线程同时运行
[CMS-concurrent-preclean-start]
调整堆的大小 设置CMS在清理之后进行内存压缩，目的是清理内存中的碎片
[CMS-concurrent-reset-start]

5.G1  代替GMS 性能调优时建议使用 取消新生代和老年代之间的物理划分，取而代之的是逻辑上的划分
不用单独对每个代进行设置，不用担心堆内存的大小
取而代之的是将堆划分为若干个区域（Region),这些区域中包含了逻辑上的年轻代和老年代
分区之间可以相互拷贝
G1中存在一个Humongous 专门来存放巨型对象，如果1个H区存放不下
G1会找连续的H区来存放
1.开启G1垃圾回收器
2.设置堆的最大内存
3.设置最大的停顿时间

提供三种回收模式
*Young GC  主要对新生代 eden区进行GC 他在Eden区空间耗尽时会被触发

*MixGC
当越来越多的对象晋升到老年代old region 时，为了避免堆内存被耗尽，会触发mixGC
除了回收整个Young Region还会回收一部分的Old Region
1.全局并发标记
2.拷贝存活对象

全局并发标记步骤：
1.初始标记  会执行一次年轻代GC，会产生全局停顿
2.根区域扫描
3.并发标记
4.重新标记
5.清除垃圾

*FullGC
-------------
G1相关参数

-XX:+UseG1GC

-XX:MaxGCPauseMillis=100  设置暂停时间，默认是200毫秒

-XX:G1HeapRegionSize=n
设置G1区域的大小，值是2的幂，范围是1MB到32MB之间，根据最小的java堆大小划分出月1024个区域

-XX:ParallelGCThreads=n

-XX:ConcGCThreads=n  一般设为前面线程数的的3/4

-XX:InitiatingHeapOccupancyPercent=n  设置触发标记周期的java堆占用率阈值，默认占用率是整个java、堆的45%

------------------------------
对G1的优化
1.年轻代大小
避免使用-Xmn 选项或者-XX：NewRatio 等其他相关选项显示设置年轻代大小
固定年轻代的大小会覆盖暂停的时间目标

2.暂停的时间目标不要太过于苛刻

-------------------
可视化GC日志分析工具  https://gceasy.io/
1.生成GC.log
2.使用GC easy工具

-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xms256m -XX:+PrintGCDetails
-XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC
-Xloggc:F://log/gc.log






